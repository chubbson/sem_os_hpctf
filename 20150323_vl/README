include <pthreads.h> 
-lptreads
thread-id ist plattformabhängig (struct pointer long)

threads in kombination mit: 
fork()
exec()
exit()
Signale

// Data, heap (malloc) Text sind gemeinsam nur einmal vorhanden. 

// stack ist für jeden thread vorhanden
// ausgenommen pointer, da kann ein anderer thread natürlich daten verändern. 

//high level io asugabe und fflusch könen doppelt ausgabe ausgaben. 

//pthread_equal() sicher vergleichbar
//now: pthread_self() , prev depricated gettid

// thread beenden
// return
// - pthread_exit(result) // result ist void*-Pointer wie der rückgabewert der run methode 

pthread_join(thread, void **retval)
// wartet darauf das thread beendet 

// parent child beziehung existiert nicht, da threads untereinander gleichberechtigt


// alle threads einsammen ausser sie sind mit pthread_detach davon ausgenommen worden
-> pthread_tryjoin_np() und pthread_timedjoin()
// joinen warten eine gewisse zeit ansonsten was andres erledigen. 

pread_mutex_t
pthread_mutex_init initialisieren oder PTHREAD_MUTEX_INITIALIZER zuweisen
pthread_mutex_destrey freigeben (wichtig!)
pthread_lock mutex holen. blocking blockiert bis man ihn bekommt

pthread_trylock versucht zu holen (nonblocking)
pthread_unlock freigeben

lock aufrufen wenn ich lock shcon habe -> deadlock

// conditions- ähnlich wie signale zwischen threads: 
ptrhead_cond_t
pthread_cond_init(), ptread_cond_destroy()
...
phtread_cond_broadcast()

//===================
// spinlock - busy waiting, rechnet damit er die cpu resource nicht abgeben muss
//===================

// pthread_barrier_t
// pthread_barrierr_init()
// ptread_barrier_destroy()
// pthread_barrier_wait()
//===================
// alle warten bis fertig bevor diese weiterverarbeiten. 
//===================

O(n*log n) max sort ges, wenn daten unbekannt

#Makefile
../scripts/create-make > makefile
make 
make all
make clean

// TASKS
ps aux
kill <pid>

// ipc ipc2 daemon sockets. 
// mit semaphore, 
//sharedmem zugreifen

// übungsaufgabe. 
Blocking nonblocking verwenden
mutex initialisieren
mehrere threads starten 
jeder thread vresucht mutex zu bekommen, liest eine zeile der eingabe und gibt die aus
nachach leep(1) dann mutex freigeben